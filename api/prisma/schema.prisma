// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  passwordHash    String
  emailVerifiedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens       RefreshToken[]
  passwordResetTokens PasswordResetToken[]
  events              Event[]
  ticketPurchases     TicketPurchase[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Event {
  id            String      @id @default(uuid())
  name          String
  description   String
  imageUrl      String?
  startDateTime DateTime
  endDateTime   DateTime
  isVirtual     Boolean     @default(false)
  address       String? // Optional for virtual events
  capacity      Int? // Maximum number of attendees
  status        EventStatus
  ownerId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User     @relation(fields: [ownerId], references: [id])
  tickets Ticket[]
}

model Ticket {
  id               String  @id @default(uuid())
  eventId          String
  name             String
  description      String?
  price            Float
  totalTickets     Int
  remainingTickets Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event           Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketPurchases TicketPurchase[]

  @@unique([eventId, name]) // No two tickets for the same event should have the same name
}

model TicketPurchase {
  id           String    @id @default(uuid())
  attendeeId   String
  ticketTypeId String
  quantity     Int
  purchasedAt  DateTime  @default(now())
  scannedAt    DateTime?

  attendee   User   @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  ticketType Ticket @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}
